<?xml version="1.0"?>
<guide self="general-concepts/tree/">
<chapter>
<title>The Gentoo repository</title>

<body>
<p>
The basic layout of the Gentoo repository is as follows:
</p>

<ul>
  <li>
  Categories, for example <c>app-editors</c>, <c>sys-apps</c>
  <ul>
    <li>Category metadata, for example <c>app-admin/metadata.xml</c></li>
    <li>
    Package directories for example <c>app-editors/vim</c>
    <ul>
      <li>Package metadata, for example <c>app-editors/vim/metadata.xml</c></li>
      <li>Package Manifest, for example <c>app-editors/vim/Manifest</c></li>
      <li>
      Ebuilds, for example <c>app-editors/vim/vim-6.3.068.ebuild</c>,
      <c>app-editors/vim/vim-7.0_alpha20050326.ebuild</c>
      </li>
      <li>
      Package files directory, for example <c>app-editors/vim/files</c>
      <ul>
        <li>
        Small patches and other miscellaneous files, for example
        <c>app-editors/vim/files/vim-completion</c>
        </li>
      </ul>
      </li>
    </ul>
    </li>
  </ul>
  </li>
  <li>Eclasses directory, <c>eclass/</c></li>
  <li>Licenses directory, <c>licenses/</c></li>
  <li>
  Metadata directory, <c>metadata/</c>. Most of the listed contents
  are not kept directly in the main git tree but instead
  auto-generated or included from other repositories as part of the
  <uri link="::general-concepts/git-to-rsync">Git to Rsync</uri>
  process.
  <ul>
    <li>
    Various control files, for example <c>layout.conf</c>, <c>timestamp</c>
    and <c>projects.xml</c>. Only <c>layout.conf</c> exists in the main git tree.
    </li>
    <li>
    XML validation files in <c>metadata/dtd/</c> and <c>metadata/xml-schema/</c>.
    </li>
    <li>
    Security advisories in <c>metadata/glsa/</c> and news items in
    <c>metadata/news/</c>
    </li>
  </ul>
  </li>
  <li>
  Profiles directory, <c>profiles/</c>
  <ul>
    <li>
    Various control and documentation files, for example <c>categories</c>,
    <c>info_pkgs</c>, <c>info_vars</c>, <c>package.mask</c>, <c>use.desc</c>
    </li>
    <li>
    Updates directory, <c>profiles/updates/</c>
    <ul>
      <li>Updates files, for example <c>profiles/updates/1Q-2005</c></li>
    </ul>
    </li>
    <li>
    Main profile cascade
    </li>
  </ul>
  </li>
  <li>Scripts directory, <c>scripts/</c></li>
</ul>
</body>

<section>
<title>What belongs in the tree?</title>
<body>

<p>
Things that do <b>not</b> belong in the tree:
</p>

<ul>
  <li>Large patches</li>
  <li>Non-text files</li>
  <li>Photos of teletubbies</li>
  <li>Files whose name contains characters outside <c>[A-Za-z0-9._+-]</c></li>
  <li>Files whose name starts with a dot, a hyphen, or a plus sign</li>
</ul>

<p>
Naming rules for distfiles are more lenient, but for interoperability their
filenames are restricted to the printable ASCII range excluding SPACE, i.e.,
U+0021 to U+007E (see also
<uri link="https://www.gentoo.org/glep/glep-0031.html#suitable-characters-for-file-and-directory-names">
GLEP 31</uri>). Any characters that have a special meaning in Bash or in
<c>SRC_URI</c> should also be avoided. If necessary, upstream files can be
<uri link="::ebuild-writing/variables/#Renaming Sources">renamed</uri> using
<c>-&gt;</c> syntax.
</p>

<p>
Software-wise, in general all of the following should be met in order for a package to be included in the tree:
</p>

<dl>
<dt>Active, Cooperative Upstream</dt>
<dd>
  If a package is undeveloped or unmaintained upstream, it can be extremely
  difficult to get problems fixed. If a package does not have an active
  upstream, the developers who add the package to the tree must ensure that
  they are able to fix any issues which may arise.
</dd>
<dd>
  Sometimes upstream may have a reason for not wanting their package included
  in the tree. This should be respected.
</dd>

<dt>Reasonably Stable</dt>
<dd>
  Keep super-experimental things out of the tree. If you must commit them,
  consider using <c>package.mask</c> until things calm down, or better yet make
  them available as overlay ebuilds.
</dd>

<dt>Reasonably Useful</dt>
<dd>
  Don't feel obliged to include "Joe's '1337 XMMS Skinz Collection" or "Hans'
  Super Cool Fast File System" in the tree just because a few users ask for
  it. Stick to things that might actually be of use.
</dd>

<dt>Properly Packaged</dt>
<dd>
  If something is only available in live CVS or dodgy autopackage format,
  don't include it until upstream can come up with a decent source package.
  Similarly, avoid things that don't have a proper build system (where
  relevant) <d/> these are very tricky to maintain.
</dd>

<dt>Patching and Distribution Permitted</dt>
<dd>
  If we can't patch packages as necessary ourselves, we end up relying
  entirely upon upstream for support. This can be problematic, especially if
  upstream are slow at fixing things. We don't want to be in the situation
  where we can't stable a critical package because we're still waiting for a
  closed-source vendor to get their act together.
</dd>
<dd>
  Similarly, not being able to mirror and distribute tarballs ourselves makes
  us rely entirely upon upstream mirrors. Experience has shown that these are
  often extremely unreliable, with files changing, moving or vanishing at
  random.
</dd>

<dt>Working Ebuilds</dt>
<dd>
  If you don't have a <e>working</e> ebuild, don't include it.
</dd>

<dt>Portable</dt>
<dd>
  If software is unportable, it's generally because it's badly written.
  Remember that although x86 has a market majority <e>now</e>, it probably won't in
  the not too distant future once x86-64 catches on.
</dd>

<dt>Reasonable Security Record</dt>
<dd>
  Don't include software that has a terrible security record. Each
  vulnerability is a <e>lot</e> of work for a lot of people (security teams, arch
  teams and package maintainers).
</dd>
</dl>

</body>
</section>

</chapter>
</guide>
